init_defs_builtins: /tmp/coccinelle/standard.h
-----------------------------------------------------------------------
processing semantic patch file: finish.cocci
with isos from: /tmp/coccinelle/standard.iso
-----------------------------------------------------------------------
@@
identifier func;
@@
func(...)
{
-...
}

HANDLING: finish.c
-----------------------------------------------------------------------
let's go
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
rule starting on line 1 = 
-----------------------------------------------------------------------

@rule starting on line 1@
identifier func;
@@

func(...) {
  -...
  
}


CTL = 

((Ex_ func . func(...) ) &,
 AX(({ &,
    AX(A[((Ex _v . _S5) & !After) U
       Let r0 = 
        (} & ((FakeBrace & EX^(!FakeBrace)) & A[} U (PreExit v ErrorExit)]))
        in
        (r0 v
        (After v
         (Ex_ l0 . 
          ((EscTrueBranch & Label(l0)) &
           A[(!r0 & PrefixLabel(l0)) U
            (PrefixLabel(l0) &
             ((After v (Return v continue;)) v (Goto v break;)))]))))]))))

dependencies for rule rule starting on line 1 satisfied:
binding in = []
binding relevant in = []
label
func(...) 
----------------------------------------------------
<1[func --> id ieee80211_color_change_finish]{}>
----------------------------------------------------

exists
(Ex_ func . func(...) )
----------------------------------------------------
<1[]{}>
----------------------------------------------------

label
{
----------------------------------------------------
<6[]{};
12[]{}>
----------------------------------------------------

required states: 6 
after drop_wits
6[]{}

label
}
----------------------------------------------------
<14[]{};
16[]{};
17[]{}>
----------------------------------------------------

label
FakeBrace
----------------------------------------------------
<14[]{};
16[]{}>
----------------------------------------------------

label
FakeBrace
----------------------------------------------------
<14[]{};
16[]{}>
----------------------------------------------------

required states: 13 14 15 
after drop_wits
14[]{}

not
!FakeBrace
----------------------------------------------------
<13[]{};
15[]{}>
----------------------------------------------------

EX
EX^(!FakeBrace)
----------------------------------------------------
<14[]{}>
----------------------------------------------------

and
(FakeBrace & EX^(!FakeBrace))
----------------------------------------------------
<14[]{}>
----------------------------------------------------

label
PreExit
----------------------------------------------------
<3[]{}>
----------------------------------------------------

required states: 14 16 5 
after drop_wits

label
ErrorExit
----------------------------------------------------
<5[]{}>
----------------------------------------------------

or
(PreExit v ErrorExit)
----------------------------------------------------
<5[]{}>
----------------------------------------------------

label
}
----------------------------------------------------
<14[]{};
16[]{};
17[]{}>
----------------------------------------------------

required states: 14 16 5 
after drop_wits
14[]{}
16[]{}

AU
A[} U (PreExit v ErrorExit)]
----------------------------------------------------
<5[]{};
14[]{};
16[]{}>
----------------------------------------------------

required states: 14 
after drop_wits
14[]{}

and
((FakeBrace & EX^(!FakeBrace)) & A[} U (PreExit v ErrorExit)])
----------------------------------------------------
<14[]{}>
----------------------------------------------------

and
(} & ((FakeBrace & EX^(!FakeBrace)) & A[} U (PreExit v ErrorExit)]))
----------------------------------------------------
<14[]{}>
----------------------------------------------------

Ref
r0
----------------------------------------------------
<14[]{}>
----------------------------------------------------

label
After
----------------------------------------------------
<11[]{};
15[]{}>
----------------------------------------------------

label
EscTrueBranch
----------------------------------------------------
<8[]{}>
----------------------------------------------------

label
Label(l0)
----------------------------------------------------
<0[l0 --> labelval()]{};
1[l0 --> labelval(1)]{};
3[l0 --> labelval()]{};
4[l0 --> labelval()]{};
5[l0 --> labelval()]{};
6[l0 --> labelval(1)]{};
7[l0 --> labelval(1,2,3)]{};
8[l0 --> labelval(1,2,3)]{};
9[l0 --> labelval(1,2,3)]{};
10[l0 --> labelval(1,2,3)]{};
11[l0 --> labelval(1,2,3)]{};
12[l0 --> labelval(1,2,3,4)]{};
13[l0 --> labelval(1,2,3,4,5)]{};
14[l0 --> labelval(1,2,3,4)]{};
15[l0 --> labelval(1,2,3,4)]{};
16[l0 --> labelval(1)]{};
17[l0 --> labelval(1)]{}>
----------------------------------------------------

required states: 8 
after drop_wits
8[l0 --> labelval(1,2,3)]{}

and
(EscTrueBranch & Label(l0))
----------------------------------------------------
<8[l0 --> labelval(1,2,3)]{}>
----------------------------------------------------

label
PrefixLabel(l0)
----------------------------------------------------
<7[l0 --> prefixlabelval(1,2,3)]{};
8[l0 --> prefixlabelval(1,2,3)]{};
9[l0 --> prefixlabelval(1,2,3)]{};
10[l0 --> prefixlabelval(1,2,3)]{};
11[l0 --> prefixlabelval(1,2,3)]{};
12[l0 --> prefixlabelval(1,2,3,4)]{};
13[l0 --> prefixlabelval(1,2,3,4,5)]{};
14[l0 --> prefixlabelval(1,2,3,4)]{};
15[l0 --> prefixlabelval(1,2,3,4)]{}>
----------------------------------------------------

required states: 16 15 14 13 12 8 5 
after drop_wits
8[l0 --> prefixlabelval(1,2,3)]{}
12[l0 --> prefixlabelval(1,2,3,4)]{}
13[l0 --> prefixlabelval(1,2,3,4,5)]{}
14[l0 --> prefixlabelval(1,2,3,4)]{}
15[l0 --> prefixlabelval(1,2,3,4)]{}

label
After
----------------------------------------------------
<11[]{};
15[]{}>
----------------------------------------------------

required states: 8 12 13 14 15 
after drop_wits
15[]{}

label
Return
----------------------------------------------------
<13[]{}>
----------------------------------------------------

label
continue;
----------------------------------------------------
<>
----------------------------------------------------

or
(Return v continue;)
----------------------------------------------------
<13[]{}>
----------------------------------------------------

or
(After v (Return v continue;))
----------------------------------------------------
<13[]{};
15[]{}>
----------------------------------------------------

label
Goto
----------------------------------------------------
<>
----------------------------------------------------

label
break;
----------------------------------------------------
<>
----------------------------------------------------

or
(Goto v break;)
----------------------------------------------------
<>
----------------------------------------------------

or
((After v (Return v continue;)) v (Goto v break;))
----------------------------------------------------
<13[]{};
15[]{}>
----------------------------------------------------

and
(PrefixLabel(l0) & ((After v (Return v continue;)) v (Goto v break;)))
----------------------------------------------------
<13[l0 --> prefixlabelval(1,2,3,4,5)]{};
15[l0 --> prefixlabelval(1,2,3,4)]{}>
----------------------------------------------------

Ref
r0
----------------------------------------------------
<14[]{}>
----------------------------------------------------

not
!r0
----------------------------------------------------
<5[]{};
8[]{};
12[]{};
13[]{};
15[]{};
16[]{}>
----------------------------------------------------

label
PrefixLabel(l0)
----------------------------------------------------
<7[l0 --> prefixlabelval(1,2,3)]{};
8[l0 --> prefixlabelval(1,2,3)]{};
9[l0 --> prefixlabelval(1,2,3)]{};
10[l0 --> prefixlabelval(1,2,3)]{};
11[l0 --> prefixlabelval(1,2,3)]{};
12[l0 --> prefixlabelval(1,2,3,4)]{};
13[l0 --> prefixlabelval(1,2,3,4,5)]{};
14[l0 --> prefixlabelval(1,2,3,4)]{};
15[l0 --> prefixlabelval(1,2,3,4)]{}>
----------------------------------------------------

required states: 5 8 12 13 15 16 
after drop_wits
8[l0 --> prefixlabelval(1,2,3)]{}
12[l0 --> prefixlabelval(1,2,3,4)]{}
13[l0 --> prefixlabelval(1,2,3,4,5)]{}
15[l0 --> prefixlabelval(1,2,3,4)]{}

and
(!r0 & PrefixLabel(l0))
----------------------------------------------------
<8[l0 --> prefixlabelval(1,2,3)]{};
12[l0 --> prefixlabelval(1,2,3,4)]{};
13[l0 --> prefixlabelval(1,2,3,4,5)]{};
15[l0 --> prefixlabelval(1,2,3,4)]{}>
----------------------------------------------------

AU
A[(!r0 & PrefixLabel(l0)) U
 (PrefixLabel(l0) & ((After v (Return v continue;)) v (Goto v break;)))]
----------------------------------------------------
<8[l0 --> prefixlabelval(1,2,3)]{};
12[l0 --> prefixlabelval(1,2,3,4)]{};
13[l0 --> prefixlabelval(1,2,3,4,5)]{};
15[l0 --> prefixlabelval(1,2,3,4)]{}>
----------------------------------------------------

required states: 8 
after drop_wits
8[l0 --> prefixlabelval(1,2,3)]{}

and
((EscTrueBranch & Label(l0)) &
 A[(!r0 & PrefixLabel(l0)) U
  (PrefixLabel(l0) & ((After v (Return v continue;)) v (Goto v break;)))])
----------------------------------------------------
<8[l0 --> labelval(1,2,3)]{}>
----------------------------------------------------

exists
(Ex_ l0 . 
 ((EscTrueBranch & Label(l0)) &
  A[(!r0 & PrefixLabel(l0)) U
   (PrefixLabel(l0) & ((After v (Return v continue;)) v (Goto v break;)))]))
----------------------------------------------------
<8[]{}>
----------------------------------------------------

or
(After v
 (Ex_ l0 . 
  ((EscTrueBranch & Label(l0)) &
   A[(!r0 & PrefixLabel(l0)) U
    (PrefixLabel(l0) & ((After v (Return v continue;)) v (Goto v break;)))])))
----------------------------------------------------
<8[]{};
11[]{};
15[]{}>
----------------------------------------------------

or
(r0 v
 (After v
  (Ex_ l0 . 
   ((EscTrueBranch & Label(l0)) &
    A[(!r0 & PrefixLabel(l0)) U
     (PrefixLabel(l0) & ((After v (Return v continue;)) v (Goto v break;)))]))))
----------------------------------------------------
<8[]{};
11[]{};
14[]{};
15[]{}>
----------------------------------------------------

Let r0 = (} & ((FakeBrace & EX^(!FakeBrace)) & A[} U (PreExit v ErrorExit)]))
 in
 (r0 v
 (After v
  (Ex_ l0 . 
   ((EscTrueBranch & Label(l0)) &
    A[(!r0 & PrefixLabel(l0)) U
     (PrefixLabel(l0) & ((After v (Return v continue;)) v (Goto v break;)))]))))
----------------------------------------------------
<8[]{};
11[]{};
14[]{};
15[]{}>
----------------------------------------------------

label
_S5 with <modifTODO>
----------------------------------------------------
<0[_v --> _S5]{};
1[_v --> _S5]{};
6[_v --> _S5]{};
7[_v --> _S5]{};
8[_v --> _S5]{};
9[_v --> _S5]{};
10[_v --> _S5]{};
11[_v --> _S5]{};
12[_v --> _S5]{};
13[_v --> _S5]{};
14[_v --> _S5]{};
15[_v --> _S5]{};
16[_v --> _S5]{};
17[_v --> _S5]{}>
----------------------------------------------------

required states: 7 11 9 8 12 10 17 15 13 14 3 16 4 5 
after drop_wits
7[_v --> _S5]{}
8[_v --> _S5]{}
9[_v --> _S5]{}
10[_v --> _S5]{}
11[_v --> _S5]{}
12[_v --> _S5]{}
13[_v --> _S5]{}
14[_v --> _S5]{}
15[_v --> _S5]{}
16[_v --> _S5]{}
17[_v --> _S5]{}

exists
(Ex _v . _S5 with <modifTODO>)
----------------------------------------------------
<7[]{wit 7[_v --> _S5]{}};
8[]{wit 8[_v --> _S5]{}};
9[]{wit 9[_v --> _S5]{}};
10[]{wit 10[_v --> _S5]{}};
11[]{wit 11[_v --> _S5]{}};
12[]{wit 12[_v --> _S5]{}};
13[]{wit 13[_v --> _S5]{}};
14[]{wit 14[_v --> _S5]{}};
15[]{wit 15[_v --> _S5]{}};
16[]{wit 16[_v --> _S5]{}};
17[]{wit 17[_v --> _S5]{}}>
----------------------------------------------------

label
After
----------------------------------------------------
<11[]{};
15[]{}>
----------------------------------------------------

not
!After
----------------------------------------------------
<7[]{};
8[]{};
9[]{};
10[]{};
12[]{};
13[]{};
14[]{};
16[]{};
17[]{}>
----------------------------------------------------

and
((Ex _v . _S5 with <modifTODO>) & !After)
----------------------------------------------------
<7[]{wit 7[_v --> _S5]{}};
8[]{wit 8[_v --> _S5]{}};
9[]{wit 9[_v --> _S5]{}};
10[]{wit 10[_v --> _S5]{}};
12[]{wit 12[_v --> _S5]{}};
13[]{wit 13[_v --> _S5]{}};
14[]{wit 14[_v --> _S5]{}};
16[]{wit 16[_v --> _S5]{}};
17[]{wit 17[_v --> _S5]{}}>
----------------------------------------------------

AU
A[((Ex _v . _S5 with <modifTODO>) & !After) U
 Let r0 = 
  (} & ((FakeBrace & EX^(!FakeBrace)) & A[} U (PreExit v ErrorExit)])) in
  (r0 v
  (After v
   (Ex_ l0 . 
    ((EscTrueBranch & Label(l0)) &
     A[(!r0 & PrefixLabel(l0)) U
      (PrefixLabel(l0) & ((After v (Return v continue;)) v (Goto v break;)))]))))]
----------------------------------------------------
<8[]{};
8[]{wit 8[_v --> _S5]{};
    wit 12[_v --> _S5]{};
    wit 13[_v --> _S5]{}};
11[]{};
12[]{wit 12[_v --> _S5]{};
     wit 13[_v --> _S5]{}};
13[]{wit 13[_v --> _S5]{}};
14[]{};
15[]{}>
----------------------------------------------------

required states: 7 
after drop_wits

AX
AX(A[((Ex _v . _S5 with <modifTODO>) & !After) U
   Let r0 = 
    (} & ((FakeBrace & EX^(!FakeBrace)) & A[} U (PreExit v ErrorExit)])) in
    (r0 v
    (After v
     (Ex_ l0 . 
      ((EscTrueBranch & Label(l0)) &
       A[(!r0 & PrefixLabel(l0)) U
        (PrefixLabel(l0) &
         ((After v (Return v continue;)) v (Goto v break;)))]))))])
----------------------------------------------------
<>
----------------------------------------------------

and
({ &,
 AX(A[((Ex _v . _S5 with <modifTODO>) & !After) U
    Let r0 = 
     (} & ((FakeBrace & EX^(!FakeBrace)) & A[} U (PreExit v ErrorExit)])) in
     (r0 v
     (After v
      (Ex_ l0 . 
       ((EscTrueBranch & Label(l0)) &
        A[(!r0 & PrefixLabel(l0)) U
         (PrefixLabel(l0) &
          ((After v (Return v continue;)) v (Goto v break;)))]))))]))
----------------------------------------------------
<>
----------------------------------------------------

AX
AX(({ &,
   AX(A[((Ex _v . _S5 with <modifTODO>) & !After) U
      Let r0 = 
       (} & ((FakeBrace & EX^(!FakeBrace)) & A[} U (PreExit v ErrorExit)]))
       in
       (r0 v
       (After v
        (Ex_ l0 . 
         ((EscTrueBranch & Label(l0)) &
          A[(!r0 & PrefixLabel(l0)) U
           (PrefixLabel(l0) &
            ((After v (Return v continue;)) v (Goto v break;)))]))))])))
----------------------------------------------------
<>
----------------------------------------------------

and
((Ex_ func . func(...) ) &,
 AX(({ &,
    AX(A[((Ex _v . _S5 with <modifTODO>) & !After) U
       Let r0 = 
        (} & ((FakeBrace & EX^(!FakeBrace)) & A[} U (PreExit v ErrorExit)]))
        in
        (r0 v
        (After v
         (Ex_ l0 . 
          ((EscTrueBranch & Label(l0)) &
           A[(!r0 & PrefixLabel(l0)) U
            (PrefixLabel(l0) &
             ((After v (Return v continue;)) v (Goto v break;)))]))))]))))
----------------------------------------------------
<>
----------------------------------------------------

-----------------------------------------------------------------------
Finished
-----------------------------------------------------------------------
Check duplication for 1 files
